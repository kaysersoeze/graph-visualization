{"version":3,"file":"../../minimizer.js","sources":["util.c","brent.c","mnbrak.c","linmin.c","frprmn.c","minimizer.c"],"names":[],"mappingsoBA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AALA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAAA;;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AACA;AAAA;;;;AANA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;AAvCA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AACA;AAAA;AA4CA;AAAA;;;AAHA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;AAMA;AAAA;AAAA;AAAA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AA1BA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAyBA;;;AAtBA;AAAA;AAAA;AACA;AAAA;AAAA;AAqBA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;AAIA;AAAA;AACA;AAAA;AACA;;;;;;;;;AASA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;AAIA;;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;AAIA;AAAA;AAAA;;;;;AAIA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;AAnBA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;;;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;AADA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;AAIA;AACA;;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;;AADA;AAAA;;AAQA;AAAA;;;;;;;;;;;;;;;;;;AAMA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;;AADA;AAAA;;AAWA;;;;;;;;;;;;;;;;AAUA;AAAA;AAAA;;AACA;AACA;AAgBA;AAAA;;AAZA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA","sourcesContent":["/*****************************************************************************\n\n* Author : Ludvig Sundström\n\n* File Name : util.c\n\n* Purpose : \n\n* Creation Date : 26-06-2015\n\n* Last Modified : \n\n*****************************************************************************/\n\n#include <stdlib.h>\n#include <stdio.h>\n\nfloat *vector(long n) \n{\n  float *v;\n  v = (float *) malloc((size_t) (n * sizeof(float)));\n  return v;\n}\n\n\nvoid rt_error(char error_text[])\n{\n  fprintf(stderr,\"Run-time error...\\n\");\n  fprintf(stderr,\"%s\\n\",error_text);\n  fprintf(stderr,\"...now exiting to system...\\n\");\n  exit(1);\n}\n","/*****************************************************************************\n* Author : Ludvig Sundström\n*\n* File Name : brent.c\n*\n* Purpose : \n*\n* Creation Date : 25-06-2015\n*\n*****************************************************************************/\n\n#include <math.h>\n#include \"util.h\"\n\n#define ITMAX 100\n#define CGOLD 0.3819660\n#define ZEPS 1.0e-10\n\nfloat brent(float ax, float bx, float cx, float (*f)(float), float tol,\n        float *xmin)\n{\n  int iter;\n  float a,b,d,etemp,fu,fv,fw,fx,p,q,r,tol1,tol2,u,v,w,x,xm;\n  float e=0.0;\n  void rt_error(); \n\n  a=(ax < cx ? ax : cx);\n  b=(ax > cx ? ax : cx);\n  x=w=v=bx;\n  fw=fv=fx=(*f)(x);\n  for (iter=1;iter<=ITMAX;iter++) {\n    xm=0.5*(a+b);\n    tol2=2.0*(tol1=tol*fabs(x)+ZEPS);\n    if (fabs(x-xm) <= (tol2-0.5*(b-a))) {\n      *xmin=x;\n      return fx;\n    }\n    if (fabs(e) > tol1) {\n      r=(x-w)*(fx-fv);\n      q=(x-v)*(fx-fw);\n      p=(x-v)*q-(x-w)*r;\n      q=2.0*(q-r);\n      if (q > 0.0) p = -p;\n      q=fabs(q);\n      etemp=e;\n      e=d;\n      if (fabs(p) >= fabs(0.5*q*etemp) || p <= q*(a-x) || p >= q*(b-x))\n      d=CGOLD*(e=(x >= xm ? a-x : b-x));\n      else {\n        d=p/q;\n        u=x+d;\n        if (u-a < tol2 || b-u < tol2)\n        d=SIGN(tol1,xm-x);\n      }\n    } else {\n      d=CGOLD*(e=(x >= xm ? a-x : b-x));\n    }\n    u=(fabs(d) >= tol1 ? x+d : x+SIGN(tol1,d));\n    fu=(*f)(u);\n    if (fu <= fx) {\n      if (u >= x) a=x; else b=x;\n      SHFT(v,w,x,u)\n      SHFT(fv,fw,fx,fu)\n    } else {\n      if (u < x) a=u; else b=u;\n      if (fu <= fw || w == x) {\n        v=w;\n        w=u;\n        fv=fw;\n        fw=fu;\n      } else if (fu <= fv || v == x || v == w) {\n        v=u;\n        fv=fu;\n      }\n    }\n  }\n  rt_error(\"Too many iterations in brent\");\n  *xmin=x;\n  return fx;\n}\n\n#undef ITMAX\n#undef CGOLD\n#undef ZEPS\n#undef SHFT\n","\n#include <math.h>\n#include \"util.h\"\n\n#define GOLD 1.618034\n#define GLIMIT 100.0\n#define TINY 1.0e-20\n\nvoid mnbrak(ax,bx,cx,fa,fb,fc,func)\nfloat *ax,*bx,*cx,*fa,*fb,*fc;\nfloat (*func)();\n{\n  float ulim,u,r,q,fu,dum;\n\n  *fa=(*func)(*ax);\n  *fb=(*func)(*bx);\n  if (*fb > *fa) {\n    SHFT(dum,*ax,*bx,dum)\n    SHFT(dum,*fb,*fa,dum)\n  }\n  *cx=(*bx)+GOLD*(*bx-*ax);\n  *fc=(*func)(*cx);\n  while (*fb > *fc) {\n    r=(*bx-*ax)*(*fb-*fc);\n    q=(*bx-*cx)*(*fb-*fa);\n    u=(*bx)-((*bx-*cx)*q-(*bx-*ax)*r)/ (2.0*SIGN(MAX(fabs(q-r),TINY),q-r));\n    ulim=(*bx)+GLIMIT*(*cx-*bx);\n    if ((*bx-u)*(u-*cx) > 0.0) {\n      fu=(*func)(u);\n      if (fu < *fc) {\n        *ax=(*bx);\n        *bx=u;\n        *fa=(*fb);\n        *fb=fu;\n        return;\n      } else if (fu > *fb) {\n        *cx=u;\n        *fc=fu;\n        return;\n      }\n      u=(*cx)+GOLD*(*cx-*bx);\n      fu=(*func)(u);\n      } else if ((*cx-u)*(u-ulim) > 0.0) {\n        fu=(*func)(u);\n        if (fu < *fc) {\n          SHFT(*bx,*cx,u,*cx+GOLD*(*cx-*bx))\n          SHFT(*fb,*fc,fu,(*func)(u))\n        }\n      } else if ((u-ulim)*(ulim-*cx) >= 0.0) {\n        u=ulim;\n        fu=(*func)(u);\n    } else {\n      u=(*cx)+GOLD*(*cx-*bx);\n      fu=(*func)(u);\n    }\n    SHFT(*ax,*bx,*cx,u)\n    SHFT(*fa,*fb,*fc,fu)\n  }\n}\n\n#undef GOLD\n#undef GLIMIT\n#undef TINY\n#undef MAX\n#undef SIGN\n#undef SHFT\n","/*****************************************************************************\n\n* Author : Numerical recepies in C, modified by Ludvig Sundström\n\n* File Name : linmin.c\n\n* Purpose : Performs line minimization.\n\n* Creation Date : 25-06-2015\n\n*****************************************************************************/\n\n#include <stdlib.h>\n\n#define TOL 2.0e-4 \n\nint ncom; \nfloat *pcom, *xicom, (*nrfunc)(float []);   \n\n/*  Given an n-dimensional point p[1..n] and an n-dimensional direction\nxi[1..n], moves and resets p to where the function func(p) takes on a\nminimum along the direction xi from p, and replaces xi by the actual\nvector displacement that p was moved. Also returns as fret the value\nof func at the returned location p. This is actually all accomplished\nby calling the routines mnbrak and brent.  \n*/   \nvoid linmin(p, xi, n, fret, func)   \nfloat p[], xi[];\nint n;\nfloat *fret;\nfloat (*func)();\n{   \n  float brent(float ax, float bx, float cx,   \n    float (*f)(float), float tol, float *xmin);   \n  float f1dim(float x);   \n  void mnbrak(float *ax, float *bx, float *cx, float *fa, float *fb,   \n  float *fc, float (*func)(float));   \n  int i;   \n  float *vector();\n  float xx, xmin, fx, fb, fa, bx, ax;   \n  ncom = n; \n  pcom = vector(n);   \n  xicom = vector(n);   \n  nrfunc = func;   \n  for (i = 0; i < n; i++) {   \n    pcom[i] = p[i];   \n    xicom[i] = xi[i];   \n  }   \n  ax = 0.0; \n  xx = 1.0;   \n  mnbrak(&ax, &xx, &bx, &fa, &fx, &fb, f1dim);   \n  *fret = brent(ax, xx, bx, f1dim, TOL, &xmin);   \n  for (i=0; i<n; i++) { \n    xi[i] *= xmin;   \n    p[i] += xi[i];   \n  }   \n  free(xicom);\n  free(pcom);\n}   \n\n\n//Must accompany linmin.   \nfloat f1dim(float x)   \n{   \n  float *vector();\n  int i;   \n  float f, *xt;   \n  xt = vector(ncom);   \n  for (i = 0; i <ncom; i++) {\n    xt[i] = pcom[i] + x * xicom[i];   \n  }\n  f = (*nrfunc)(xt);   \n  free(xt);\n  return f;   \n}  \n\n","/*****************************************************************************\n\n* Author : Numerical recepies in C, modiefied by Ludvig Sundström\n\n* File Name : frprmn.c\n\n* Purpose : Performs Fletcher-Reeves-Polak-Ribiere minimization\n\n* Creation Date : 25-06-2015\n\n*****************************************************************************/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define ITMAX 200\n#define EPS 1.0e-10\n#define FREEALL free(xi);free(h);free(g);\n\n/** \n * Given a starting point p, performs minimization on a function func using its\n * gradient calculated by dfunc. The convergence tolerance of func is ftol.\n * Returned quatities are p - the location of the minimum, iter - the number of\n * iterations performed and fret - the minimum value of value. \n * Calls routine linmin to perform line minimizations.\n */\nvoid frprmn(p, n, ftol, iter, fret, func, dfunc)\nfloat p[], ftol, *fret, (*func)();\nvoid (*dfunc)();\nint n, *iter;\n{\n  int j, its;\n  float gg, gam, fp, dgg;\n  float *g, *h, *xi, *vector();\n  void linmin(), rt_error();\n\n  g = vector(n);\n  h = vector(n);\n  xi = vector(n);\n  fp = (*func)(p);\n  (*dfunc)(p, xi);\n  for (j = 0; j < n; j++) {\n    g[j] = -xi[j];\n    xi[j] = h[j] = g[j];\n  }\n  for (its = 0; its < ITMAX; its++) {\n    *iter = its;\n    linmin(p, xi, n, fret, func);\n    if (2.0 * fabs(*fret - fp) <= ftol * (fabs(*fret) + fabs(fp) + EPS)) {\n      FREEALL\n      return;\n    }\n    fp = (*func)(p);\n    (*dfunc)(p, xi);\n    dgg = gg = 0.0;\n    for (j = 0; j < n; j++) {\n      gg += g[j] * g[j];\n      dgg += (xi[j] + g[j]) * xi[j];\n    }\n    if (gg == 0.0) {\n      FREEALL\n      return;\n    }\n    gam = dgg / gg;\n    for (j = 0; j < n; j++) {\n      g[j] = -xi[j];\n      xi[j] = h[j] = g[j] + gam * h[j];\n    }\n  }\n  rt_error(\"Too many iterations in frprmn()\");\n}\n\n#undef ITMAX\n#undef EPS\n#undef FREEALL\n\n","/*****************************************************************************\n\n* Author : Ludvig Sundström\n\n* File Name : minimize.c\n\n* Purpose :   \n\n* Creation Date : 24-06-2015\n\n* Last Modified : \n\n*****************************************************************************/\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n\n#define SPRING_LENGTH 200.0\n#define STIFFNESS 2.0\n#define FTOL 0.0001\n\n//Distance matrix\nstatic float *fdm;\n\n// Dimesion of the coordinate vector\nstatic unsigned int dim;\nstatic unsigned int blen;\n\nstatic int *iter; \nstatic float *fret; \n\nfloat energy (xi, yi, xj, yj, wij, dij)\nfloat xi, yi, xj, yj, wij, dij; \n{\n  float dx = xi - xj;\n  float dy = yi - yj;\n  float dist = (float) sqrt(dx * dx + dy * dy);\n  if (fabs(dist) <  0.1) {\n    dist = 1;\n  } \n  return wij * (float) pow(dist - dij, 2);\n}\n\nfloat force (xi, yi, xj, yj, wij, dij, dir)\nfloat xi, yi, xj, yj, wij, dij; \nchar dir;\n{\n  float dx = xi - xj;\n  float dy = yi - yj; \n  float dist = (float) sqrt(dx * dx + dy * dy);\n  if (fabs(dist) <  0.1) {\n    dist = 1;\n  } \n  if (dir == 'x')\n    return -2 * wij * dx * (dist - dij) / dist;\n  else \n    return -2 * wij * dy * (dist - dij) / dist;\n} \n\nfloat calcFunction (float p[]) {\n  unsigned int i, j;\n  float rtn = 0;\n  for (i = 0; i < dim - 1; i += 2) {\n    for (j = i + 2; j < dim; j += 2) {\n      float d = fdm[(i / 2) * (dim / 2) + (j / 2)];\n      float wij = d * STIFFNESS;\n      float dij = d * blen;\n      rtn += energy(p[i], p[i + 1], p[j], p[j + 1], wij, dij);\n    }\n  }\n  return rtn;\n}\n\nvoid calcGradient (float p[], float df[]) \n{\n  unsigned int i, j;\n  for (i = 0; i < dim; i += 2) {\n    for (j = i + 2; j < dim; j += 2) {\n      float d = fdm[(i / 2) * (dim / 2) + (j / 2)];\n      float wij = d * STIFFNESS;\n      float dij = d * blen;\n      df[i] += force(p[i], p[i + 1], p[j], p[j + 1], wij, dij, 'x');\n      df[i + 1] += force(p[i], p[i + 1], p[j], p[j + 1], wij, dij, 'y');\n      df[j] += -force(p[i], p[i + 1], p[j], p[j + 1], wij, dij, 'x');\n      df[j + 1] += -force(p[i], p[i + 1], p[j], p[j + 1], wij, dij, 'y');\n    }\n  }\n}\n\nfloat (*func)(float []) = calcFunction;\nvoid (*dfunc)(float [], float []) = calcGradient;\n\nint minimize (flatpos, flatdmat, len, bondlen) \nfloat *flatpos, *flatdmat;\nunsigned int len, bondlen;\n{\n  void frprmn();\n  if (len % 2 != 0) {\n    printf(\"Error: uneven number of positions\\n\");\n    return -1;\n  }\n\n\n  dim = len;\n  fdm = flatdmat; \n  blen = bondlen;\n  iter = malloc(sizeof(int));\n  fret = malloc(sizeof(float));\n\n  frprmn(flatpos, dim, FTOL, iter, fret, func, dfunc);\n\n  free(fret);\n  free(iter);\n\n  return 0; \n}\n\n"]}